import JSZip from 'jszip';
import { generateLetterPDF } from './pdfExport';
import { Letter } from '../types/Letter';

export const exportAllLettersAsZip = async (letters: Letter[]) => {
  const zip = new JSZip();
  const sealedLetters = letters.filter(letter => letter.isSealed);

  if (sealedLetters.length === 0) {
    throw new Error('No sealed letters to export');
  }

  // Create a folder for the letters
  const lettersFolder = zip.folder('Sealya_Letters');
  
  if (!lettersFolder) {
    throw new Error('Failed to create letters folder');
  }

  // Add a README file
  const readmeContent = `
# Sealya Letters Archive

This archive contains ${sealedLetters.length} sealed letter${sealedLetters.length !== 1 ? 's' : ''} from your Sealya collection.

Generated on: ${new Date().toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })}

Each letter is saved as a PDF with its original formatting, seal, and timestamp.

---

"Every letter is a piece of your soul, safely sealed in time." ✨

Visit: https://sealya.netlify.app
  `.trim();

  lettersFolder.file('README.txt', readmeContent);

  // Process each letter
  for (let i = 0; i < sealedLetters.length; i++) {
    const letter = sealedLetters[i];
    
    try {
      // Generate PDF content for each letter
      const pdfBlob = await generateLetterPDFBlob(letter);
      const filename = `${String(i + 1).padStart(3, '0')}_${letter.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_${letter.timestamp.getTime()}.pdf`;
      
      lettersFolder.file(filename, pdfBlob);
    } catch (error) {
      console.error(`Failed to generate PDF for letter: ${letter.title}`, error);
      
      // Fallback: create a text file if PDF generation fails
      const textContent = `
Title: ${letter.title}
Label: ${letter.label}
Seal: ${letter.emoji}
Date: ${letter.timestamp.toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}

Content:
${letter.content}

---
Generated by Sealya - A digital sanctuary for sealed emotions
      `.trim();
      
      const filename = `${String(i + 1).padStart(3, '0')}_${letter.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_${letter.timestamp.getTime()}.txt`;
      lettersFolder.file(filename, textContent);
    }
  }

  // Generate and download the zip file
  const zipBlob = await zip.generateAsync({ type: 'blob' });
  const url = URL.createObjectURL(zipBlob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `Sealya_Letters_Archive_${new Date().toISOString().split('T')[0]}.zip`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
};

// Helper function to generate PDF as blob instead of downloading
const generateLetterPDFBlob = async (letter: Letter): Promise<Blob> => {
  const html2pdf = (await import('html2pdf.js')).default;
  
  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const htmlContent = `
    <div style="font-family: 'Roboto Mono', monospace; max-width: 600px; margin: 40px auto; padding: 40px; background: white;">
      <!-- Header -->
      <div style="text-align: center; border-bottom: 2px solid #e5e7eb; padding-bottom: 30px; margin-bottom: 40px;">
        <div style="font-size: 48px; margin-bottom: 10px;">${letter.emoji}</div>
        <h1 style="font-family: 'serif'; font-size: 32px; color: #581c87; margin: 0; line-height: 1.2;">
          ${letter.title}
        </h1>
        <div style="margin-top: 15px; color: #7c3aed; font-size: 14px;">
          <span style="background: #f3e8ff; padding: 4px 12px; border-radius: 12px; margin-right: 15px;">
            ${letter.label}
          </span>
          <span>${formatDate(letter.timestamp)}</span>
        </div>
      </div>

      <!-- Content -->
      <div style="line-height: 1.8; color: #374151; font-size: 16px; white-space: pre-wrap;">
        ${letter.content}
      </div>

      <!-- Footer -->
      <div style="margin-top: 50px; padding-top: 30px; border-top: 1px solid #e5e7eb; text-align: center; color: #9ca3af; font-size: 12px;">
        <p>Sealed with ${letter.emoji} • Generated by Sealya</p>
        <p style="margin-top: 5px;">A digital sanctuary for sealed emotions</p>
      </div>
    </div>
  `;

  const options = {
    margin: 0.5,
    image: { type: 'jpeg', quality: 0.98 },
    html2canvas: { 
      scale: 2,
      useCORS: true,
      letterRendering: true,
    },
    jsPDF: { 
      unit: 'in', 
      format: 'a4', 
      orientation: 'portrait',
      compress: true
    }
  };

  return html2pdf().set(options).from(htmlContent).outputPdf('blob');
};